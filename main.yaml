---
- hosts: localhost
  roles:
    - 0.1seedFbxFiles
    - 1.1ConvertFBXtoOBJ
    - 1.2ConvertOBJtoSTL
    - 2.1ConvertSTLsToSPL4
    - 3.1GenerateHyperplanes
    - 4.1RotateSpacetime
    - 5.1ConvertBackToOBJ
    - 6.1UnityImport


  vars:
  # -- ConvertOBJtoSTL --

    # Generates animations of multiple animation runs chained together N times for the listed values of N.
    animation_length_xN: [3]

  # -- ConvertSTLstoSPL4 --

    # Which types of 4-dimensional object to generate from the animations true/false
    hollow: false
    kleinlikeLoop: true
    blockBounded: true
    # WARNING The below currently generate slowly due to an inefficient handwritten code culling for external vertexes generated by Delaney tetrahedization
    # Should probably use a capstone programme to generate the tetrahedrons, then stitch it to the file whenever needed if a bool is set to TRUE, and just run one programme for string-like 4d translations, and one for loop-like.
    fullBounded: false
          

    # Hollow vars
        # increment determines the amount that w increments per frame, in other words the conversion rate between time and space.
    increment_hollow_w: [0.1]

    # kleinlikeLoop vars - note the way I have set up Kleinlike assumes that the animation ends at the same position it started (a looping animation)
      # substituteAxis (value only accepts 0,1,2) is the spatial dimension which is rotated into time to form the loop (The remaining two dimensions are rotated into each other is kleinFlip is not set to 0)
    substituteAxis: [0] #[1,2,0]
      # originDistance is the distance (as a multiple of the distance from the centre of the shape to its edge in that dimension) that the shape is rotated about in spacetime. N.B I think values between 1 and -1 may cause weird behaviour. Since the rotation occus on one space-time axis of spacetime it is also the conversion rate between time and space. Can't be bothered to make it 100% match up to wAxisInc above, since my main concern was to make loops of useful size easier.
    originDistance: [1.1]
      # rotations is the number of times that the shape flips around the two remaining spatial axes which it is not already rotating into time. An integer number will always create a coherant "regular" 4d shape. If the shape has a symettry of the form that you could rotate it a fraction of 360 degrees and it would be self similar, then you should also be able to exclude the remaining spatial dimension and rotate by a non-integer multiple of that fraction in order to create a functional Klein shape (not tested)
    rotations: [0]

    # Bounded Vars
        # This determines the amount that w increments per frame, in other words the conversion rate between time and space.
    increment_bounded_w: [0.2]


  # -- GenerateHyperplanes --

    # List of hyperplanes to use, where hyperplanes are four floats for the x,y,z,w components of the vector which we take hyperplane snapshosts as paralell to, and a string for the name.
    hyperplanes:
      # - Name: CoolHyperplane
      #   x:    0.1
      #   y:    2.2
      #   z:    -1.4
      #   w:    -14
      # - Name: Hyperplane1
      #   x:    0
      #   y:    1
      #   z:    0
      #   w:    0
      - Name: Hyperplane2
        x:    1
        y:    1
        z:    0
        w:    0

  # -- Rotate Spacetime --

    # Number of slices to cut the spl4 4-dimensional object into perpendicular to the chosen hyperplane
    sliceSpacetime: [30]