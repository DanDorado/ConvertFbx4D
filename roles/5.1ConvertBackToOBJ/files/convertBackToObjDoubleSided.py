
## Command to make the file run ##
#
# sudo '../../../mnt/c/Program Files/Blender Foundation/Blender 3.2/blender.exe'  -b -P importscript.py -- 1 1
#
## ARGV ##
#ARGV[0] - Convert fbx files into obj files for each frame 1=YES 0=NO
#ARGV[1] - Convert obj files into STL files 1=YES 0=NO
#

# Import the needed modules (bpy is Blender)

import bpy
import math
import os
import re
import sys
import glob


#
## Values that could change ##
# Animation speed (how far apart frames are)
animSpeed=1
# save/load .obj files to/from
# load .stl files from


# Get the arguments and save as strings
argv = sys.argv
argv = argv[argv.index("--") + 1:]  # get all args after "--"
##print(argv)

# delete starting objects generated by Blender by Default
#print("Deleting Starting Objects")
#print("")
startingObjects = ["Light", "Camera"]
for obj in startingObjects:
    bpy.data.objects[obj].select_set(True)    
    bpy.context.view_layer.objects.active = bpy.data.objects[obj]
bpy.ops.object.delete()


######## Import final STLs ##########


# Argv0 should be the first subdir specific to the original animation, Argv1 should be the second specific to the 4d shape
#print("ArgV0                      "+argv[0])
#print("ArgV1                      "+argv[1])


# I ended up doing this using os.getcwd() since for some reason it didn't work otherwise.
# It gets to the processfile directory and then constructs the subdirs based off of argv, creating them for the endpath if not existing.
# endpath will be what is copied over in the final ansible stage for unity to import with Megacache.
startPath = os.getcwd()

startPath=os.path.split(startPath)[0]

startPath=os.path.join(startPath, "processFiles")

endPath=os.path.join(startPath, "7-rotatedOBJ")
startPath=os.path.join(startPath, "6-RotatedSTLFrames")

startPath=os.path.join(startPath, argv[0])
endPath=os.path.join(endPath, argv[0])
isExist = os.path.exists(endPath)
if not isExist:
   os.makedirs(endPath)


startPath=os.path.join(startPath, argv[1])
endPath=os.path.join(endPath, argv[1])
isExist = os.path.exists(endPath)
if not isExist:
   os.makedirs(endPath)


# Gets the stl files in the startPath directory and then imports them into blender.
# We then need to make them double-sided since the normals are messed up, and I want to use a default material.
# I do this by importing them once, flipping the normals, then importing it again on top.
# Then export as an object

listofDirs=list(glob.glob(startPath+"/*"))
#print(listofDirs)

for filename in listofDirs:
    if re.search("stl", filename):
        print("FOUND STL\n\n\n")
        if os.path.isfile(filename):
            print(filename)
            bpy.ops.import_mesh.stl(filepath=filename)
            objects = bpy.context.scene.objects
            scene = bpy.context.scene
            selected = bpy.context.selected_objects
            meshes = [o for o in selected if o.type == 'MESH']
            for obj in meshes:
                bpy.ops.object.editmode_toggle()
                bpy.ops.mesh.select_all(action='SELECT')
                bpy.ops.mesh.flip_normals()

            bpy.ops.object.mode_set(mode='OBJECT')
            bpy.ops.import_mesh.stl(filepath=filename)
            objects = bpy.context.scene.objects
            bpy.ops.object.select_all(action='SELECT')

            scene = bpy.context.scene

            bpy.ops.object.select_all(action='SELECT')
            bpy.ops.export_scene.obj(filepath=endPath+"/DoubleSided"+os.path.basename(filename)[:-3]+"obj",use_selection=True)
            bpy.ops.object.delete()
            #for obj in objects:
            #    print(obj.name)